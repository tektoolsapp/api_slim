{% extends 'layout/main.twig' %}

{% block middle_col %}


    <div>
        <h1 class="w3-xlarge w3-left"><b>Dashboard</b></h1>
    </div>

    <div style="clear:both;"></div>

    <div>Text</div>

    {{host}}
    
    {{token}}

    
    <!--
    <form id="upload_form" accept-charset="multipart/form-data">
        <input type="file" id="myFile" name="filename">
        <input type="text" id="myText" name="myText">
    </form>

    

    -->

    <form method="post" action="upload/files" enctype="multipart/form-data">
        <label>Select a file:</label>
        <input type="file" name="example1" required />
        <br />
        <input type="submit" value="XUpload" />
    </form>

    

    {# <div>
        <a id="fcm-send" href="#" class="w3-button w3-right w3-xlarge">&times;</a>
    </div> #}

    <body>
    <div id="token"></div>
    <div id="msg"></div>
    <div id="notis"></div>
    <div id="err"></div>
    <script src="https://www.gstatic.com/firebasejs/7.16.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.16.1/firebase-messaging.js"></script>
    <!--
    <script>
        MsgElem = document.getElementById("msg");
        TokenElem = document.getElementById("token");
        NotisElem = document.getElementById("notis");
        ErrElem = document.getElementById("err");
        // Initialize Firebase
        // TODO: Replace with your project's customized code snippet
        var config = {
            'messagingSenderId': '571826693647',
            'apiKey': 'AIzaSyBBG3zokCXbM1Iq34d2VRGz1klsNyzqSn0',
            'projectId': 'my-fcm-3cbc5',
            'appId': '1:571826693647:web:4d97ac04d771fea1d5657a',
        };

        //firebase.initializeApp(config);

        {# const messaging = firebase.messaging();
        messaging
            .requestPermission()
            .then(function () {
                MsgElem.innerHTML = "Notification permission granted." 
                console.log("Notification permission granted.");

                // get the token in the form of promise
                return messaging.getToken()
            })
            .then(function(token) {
                TokenElem.innerHTML = "token is : " + token
            })
            .catch(function (err) {
                ErrElem.innerHTML =  ErrElem.innerHTML + "; " + err
                console.log("Unable to get permission to notify.", err);
            }); #}

    </script>

    -->

{% endblock %}

{% block javascripts %}

    <script>window.jQuery || document.write('<script src="{{ base_path() }}/js/jquery-2.0.0.min.js">\x3C/script>')</script>
    <script src="https://code.jquery.com/ui/1.10.3/jquery-ui.min.js" integrity="sha256-lnH4vnCtlKU2LmD0ZW1dU7ohTTKrcKP50WA9fa350cE="crossorigin="anonymous"></script>

    <script src="{{ base_path() }}/js/common.js"></script>

    {# <script src="{{ base_path() }}/js/minipdf.js"></script>

    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pako/1.0.3/pako.min.js" integrity="sha256-X7u/eQo6oIgWqc5jOmTjQn3loM8Lse0ock76Gkkn/Ro=" crossorigin="anonymous"></script>


    <script src="{{ base_path() }}/js/pdfform.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.0.0/FileSaver.min.js"></script>

    <script>
        // Example of constructing pdfform
        // If you don't care about which PDF library to use, just call without arguments, as in
        // pdfform().transform(..) / pdfform().list_fields(...)
        function make_pdfform() {
            var lib_name = document.querySelector('input[name="pdflib"]:checked').value;
            return pdfform((lib_name === 'minipdf') ? minipdf : minipdf_js);
        }

        // Example of listing all fields
        function list(buf) {
            var list_form = document.querySelector('.list_form');
            empty(list_form);

            var cnt = 1;
            var field_specs;
            try {
                field_specs = make_pdfform().list_fields(buf);
            } catch (e) {
                on_error(e);
                return;
            }
            for (var field_key in field_specs) {
                var row = document.createElement('div');
                row.appendChild(document.createTextNode(field_key));
                list_form.appendChild(row);
                field_specs[field_key].forEach(function(spec, i) {
                    if ((spec.type === 'radio') && spec.options) {
                        var fieldset_el = document.createElement('fieldset');
                        spec.options.forEach(function(ostr) {
                            var label = document.createElement('label');
                            var radio = document.createElement('input');
                            radio.setAttribute('type', 'radio');
                            radio.setAttribute('value', ostr);
                            radio.setAttribute('name', field_key + '_' + i);
                            radio.setAttribute('data-idx', i);
                            radio.setAttribute('data-key', field_key);
                            label.appendChild(radio);
                            label.appendChild(document.createTextNode(ostr));
                            fieldset_el.appendChild(label);
                        });
                        row.appendChild(fieldset_el);
                        return;
                    }

                    var input = document.createElement((spec.type === 'select') ? 'select' : 'input');
                    input.setAttribute('data-idx', i);
                    input.setAttribute('data-key', field_key);
                    if (spec.type === 'boolean') {
                        input.setAttribute('type', 'checkbox');
                    } else if (spec.type === 'string') {
                        input.setAttribute('value', cnt++);
                    } else if ((spec.type === 'select') && spec.options) {
                        spec.options.forEach(function(ostr) {
                            var option_el = document.createElement('option');
                            option_el.appendChild(document.createTextNode(ostr));
                            option_el.setAttribute('value', ostr);
                            input.appendChild(option_el);
                        });
                    }
                    row.appendChild(input);
                });
            }
        }

        // Example of filling out fields
        function fill(buf) {
            var list_form = document.querySelector('.list_form');
            var fields = {};
            list_form.querySelectorAll('input,select').forEach(function(input) {
                if ((input.getAttribute('type') === 'radio') && !input.checked) {
                    return;
                }

                var key = input.getAttribute('data-key');
                if (!fields[key]) {
                    fields[key] = [];
                }
                var index = parseInt(input.getAttribute('data-idx'), 10);
                var value = (input.getAttribute('type') === 'checkbox') ? input.checked : input.value;
                fields[key][index] = value;
            });

            var filled_pdf; // Uint8Array
            try {
                filled_pdf = make_pdfform().transform(buf, fields);
            } catch (e) {
                return on_error(e);
            }

            console.log(fields);

            var blob = new Blob([filled_pdf], {type: 'application/pdf'});
            saveAs(blob, 'pdfform.js_generated.pdf');
        }


        // From here on just code for this demo.
        // This will not feature in your website
        function on_error(e) {
            console.error(e, e.stack);  // eslint-disable-line no-console
            var div = document.createElement('div');
            div.appendChild(document.createTextNode(e.message));
            document.querySelector('.error').appendChild(div);
        }

        function empty(node) {
            var last;
            while ((last = node.lastChild)) {
                node.removeChild(last);
            }
        }

        var current_buffer;

        function on_file(filename, buf) {
            current_buffer = buf;
            document.querySelector('.url_form').setAttribute('style', 'display: none');
            var cur_file = document.querySelector('.cur_file');
            empty(cur_file);
            cur_file.setAttribute('style', 'display: block');
            cur_file.appendChild(document.createTextNode('loaded file ' + filename + ' (' + buf.byteLength + ' Bytes)'));
            var reload_btn = document.createElement('button');
            reload_btn.appendChild(document.createTextNode('use another file'));
            cur_file.appendChild(reload_btn);
            document.querySelector('.fill').removeAttribute('disabled');

            console.log("CURR BUFF: ", current_buffer);

            list(current_buffer);
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Download by URL
            // Note that this just works for URLs in the same origin, see Same-Origin Policy
            var url_form = document.querySelector('.url_form');
            url_form.addEventListener('submit', function(e) {
                e.preventDefault();
                var url = document.querySelector('input[name="url"]').value;

                console.log("URL: ", url);

                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);
                xhr.responseType = 'arraybuffer';

                xhr.onload = function() {
                    if (this.status == 200) {
                        on_file(url.split(/\//).pop(), this.response);
                    } else {
                        on_error('failed to load URL (code: ' + this.status + ')');
                    }
                };

                xhr.send();
            });

            document.querySelector('.url_form input[name="file"]').addEventListener('change', function(e) {
                var file = e.target.files[0];

                console.log("FILE: ", file);

                var reader = new FileReader();
                reader.onload = function(ev) {
                    on_file(file.name, ev.target.result);
                };
                reader.readAsArrayBuffer(file);
            });

            var fill_form = document.querySelector('.fill_form');
            fill_form.addEventListener('submit', function(e) {
                e.preventDefault();
                fill(current_buffer);
            });

            var cur_file = document.querySelector('.cur_file');
            cur_file.addEventListener('submit', function(e) {
                e.preventDefault();
                empty(document.querySelector('.error'));
                cur_file.setAttribute('style', 'display: none');
                url_form.setAttribute('style', 'display: block');
            });

            var pdflib_radios = document.querySelectorAll('input[name="pdflib"]');
            for (var i = 0;i < pdflib_radios.length;i++) {
                var r = pdflib_radios[i];
                r.addEventListener('change', function() {
                    if (current_buffer) {
                        list(current_buffer);
                    }
                });
            }

            document.querySelector('.loading').setAttribute('style', 'display: none');
        });
    </script> #}

    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.2.9/firebase-app.js"></script>

    <!-- TODO: Add SDKs for Firebase products that you want to use
        https://firebase.google.com/docs/web/setup#available-libraries -->

    <script>
    // Your web app's Firebase configuration
    var firebaseConfig = {
        apiKey: "AIzaSyBBG3zokCXbM1Iq34d2VRGz1klsNyzqSn0",
        authDomain: "my-fcm-3cbc5.firebaseapp.com",
        projectId: "my-fcm-3cbc5",
        storageBucket: "my-fcm-3cbc5.appspot.com",
        messagingSenderId: "571826693647",
        appId: "1:571826693647:web:4d97ac04d771fea1d5657a"
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    </script>

   {#  <script src="https://unpkg.com/filepond/dist/filepond.js"></script>
    <script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>

    <script>
        FilePond.registerPlugin(
            FilePondPluginImagePreview,
        );

        // Set default FilePond options
        FilePond.setOptions({
            // upload to this server end point
            server: {

            process:(fieldName, file, metadata, load, error, progress, abort, transfer, options) => {

                // fieldName is the name of the input field
                // file is the actual file object to send
                const formData = new FormData();
                formData.append(fieldName, file, file.name);

                const request = new XMLHttpRequest();
                request.open('POST', 'filepond/process');

                // Should call the progress method to update the progress to 100% before calling load
                // Setting computable to false switches the loading indicator to infinite mode
                request.upload.onprogress = (e) => {
                    progress(e.lengthComputable, e.loaded, e.total);
                };

                // Should call the load method when done and pass the returned server file id
                // this server file id is then used later on when reverting or restoring a file
                // so your server knows which file to return without exposing that info to the client
                request.onload = function () {
                    if (request.status >= 200 && request.status < 300) {
                        // the load method accepts either a string (id) or an object
                        load(request.responseText);
                    } else {
                        // Can call the error method if something is wrong, should exit after
                        error('oh no');
                    }
                };

                request.send(formData);
            },
            revert: 'filepond/revert',
            restore: 'filepond/restore?id=',
            fetch: 'filepond/fetch?data=',
            load: 'filepond/load',
            fetch: 'filepond/fetch'
        },
    });

    const pond = FilePond.create(document.querySelector('input[type="file"]')); #}
</script>

{% endblock %}